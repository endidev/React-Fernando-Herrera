{"version":3,"sources":["components/AddCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","GifGridItem","title","url","className","src","alt","getGifs","category","a","encodeURI","fetch","resp","json","data","gifs","map","img","id","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAEzB,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAeA,OACI,sBAAMC,SAVY,SAACC,GACnBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAS,GAC1BR,GAAe,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,QAM3C,SAEI,uBACIC,KAAK,OACLC,MAAQT,EACRU,SAnBc,SAACP,GACvBF,EAAeE,EAAEQ,OAAOF,a,QCNnBG,EAAc,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,IAGjC,OACI,sBAAKC,UAAU,yCAAf,UACI,qBAAKC,IAAKF,EAAKG,IAAKJ,IACpB,4BAAIA,Q,uBCNHK,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbN,EADa,iDACmCO,UAAWF,GAD9C,+DAEAG,MAAMR,GAFN,cAEbS,EAFa,gBAGEA,EAAKC,OAHP,uBAGZC,EAHY,EAGZA,KACDC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRhB,MAAOe,EAAIf,MACXC,IAAG,UAAEc,EAAIE,cAAN,aAAE,EAAYC,iBAAiBjB,QARvB,kBAYZY,GAZY,4CAAH,sDCGPM,EAAU,SAAC,GAAkB,IAAhBb,EAAe,EAAfA,SAEtB,ECHwB,SAAEA,GAC1B,MAA0BpB,mBAAS,CAC/B0B,KAAM,GACNQ,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAeA,OAVAC,qBAAW,WACPlB,EAASC,GACJkB,MAAM,SAAAC,GACHH,EAAS,CACLV,KAAMa,EACNL,SAAS,SAGtB,CAACd,IAEGe,EDbwBK,CAAcpB,GAAjCW,EAAZ,EAAOL,KAAaQ,EAApB,EAAoBA,QAEpB,OACI,qCACI,oBAAIlB,UAAU,oCAAd,SAAoDI,IAClDc,GAAW,mBAAGlB,UAAU,mCAAb,qBACb,qBAAKA,UAAU,YAAf,SAEQe,EAAOH,KAAK,SAACC,GAAD,OACR,cAAC,EAAD,eAEQA,GADCA,EAAIC,aEbxBW,EAAe,WAGxB,MAAoCzC,mBAAS,CAAC,cAA9C,mBAAO0C,EAAP,KAAmB3C,EAAnB,KAOA,OACI,qCACI,gDACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBAKI2C,EAAWd,KAAK,SAAAR,GAAQ,OACpB,cAAC,EAAD,CAEIA,SAAUA,GADLA,U,MCpB7BuB,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.3874c8a4.chunk.js","sourcesContent":["import React, {useState} from 'react'\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = ({setCategories}) => {\n\n    const [inputValue, setInputValue] = useState('')\n\n    const handleInputChange = (e) => {\n        setInputValue( e.target.value )\n    }\n\n    const handdleSubmit = (e) => {\n        e.preventDefault();\n        \n        if(inputValue.trim().length > 2){\n            setCategories( cats => [inputValue, ...cats])\n        }\n\n    }\n\n    return (\n        <form onSubmit={handdleSubmit}>\n        \n            <input \n                type='text'\n                value= {inputValue}\n                onChange={ handleInputChange }\n            />\n        </form>\n    )\n}\n\n\nAddCategory.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}\n","import React from 'react'\n\nexport const GifGridItem = ({ title, url}) => {\n\n\n    return (\n        <div className='card animate__animated animate__wobble'>\n            <img src={url} alt={title}></img>\n            <p>{title}</p>\n        </div>\n    )\n}\n","\n\nexport const getGifs = async (category) => {\n    const url= `https://api.giphy.com/v1/gifs/search?q=${ encodeURI (category) }&limit=10&api_key=LwpdRL5bp4ZS7UmdbYvLLz0EuImgBQ0k`;\n    const resp = await fetch(url);\n    const {data} = await resp.json();\n    const gifs = data.map( img => {\n        return {\n            id: img.id,\n            title: img.title,\n            url: img.images?.downsized_medium.url\n        }\n    })\n\n    return gifs;\n}\n","import React from 'react';\nimport { GifGridItem } from './GifGridItem';\nimport { useFetchGifs } from '../hooks/useFetchGifs'\n\n\nexport const GifGrid = ({ category }) => {\n\n    const {data:images, loading} = useFetchGifs( category );\n    \n    return (\n        <>\n            <h3 className='animate__animated animate__fadeIn'>{ category }</h3>\n            { loading && <p className='animate__animated animate__flash'>Loading</p>}\n            <div className='card-grid'>\n                {\n                    images.map( (img) => (\n                        <GifGridItem \n                            key={img.id}\n                            {...img }\n                        />\n                    ))\n                }      \n            </div>\n        </>\n    )\n}\n","import { useEffect, useState } from \"react\"\nimport { getGifs } from \"../helpers/getGifs\"\n\n\nexport const useFetchGifs = ( category ) =>  {\n    const [state, setState] = useState({\n        data: [],\n        loading: true,\n    })\n\n    useEffect( () => {\n        getGifs( category )\n            .then( imgs => {\n                setState({\n                    data: imgs,\n                    loading: false\n                })\n            })\n    }, [category])\n\n    return state; //data [], loading:true;\n}","import React, { useState } from 'react';\nimport { AddCategory } from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\n\nexport const GifExpertApp = () => {\n\n\n    const [categories, setCategories] = useState(['One Punch'])\n\n    // const handleAdd = () => {\n    //     // setCategories( [...categories, 'HunterXHunter'])\n    //     setCategories( cats => [...cats, 'HxH'])\n    // }\n\n    return (\n        <>\n            <h2>Gif Expert App</h2>\n            <AddCategory setCategories={ setCategories }/>\n            <hr />\n\n            {/* <button onClick={ handleAdd }>Agregar serie</button> */}\n\n            { \n                categories.map( category => \n                    <GifGrid \n                        key={category}\n                        category={category}/>    \n                )\n            }\n        </>\n    );\n}\n\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {GifExpertApp} from './GifExpertApp';\n\nimport './index.css';\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}